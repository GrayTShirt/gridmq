grid_symbol_info(3)
=================

NAME
----
grid_symbol_info - query the names and properties of gridmq symbols


SYNOPSIS
--------
*#include <gridmq/grid.h>*

*int grid_symbol_info (int 'i', struct grid_symbol_properties '*buf', int 'buflen');*


DESCRIPTION
-----------
Retrieves the symbol name and value at index 'i'.  Indices start at 0.  An index
has no significance to its associated symbol; the mappings may change between
library versions.

The grid_symbol_properties has the following definition:

----
struct grid_symbol_properties {

    /*  The constant value  */
    int value;

    /*  The constant name  */
    const char* name;

    /*  The constant namespace, or zero for namespaces themselves */
    int ns;

    /*  The option type for socket option constants  */
    int type;

    /*  The unit for the option value for socket option constants  */
    int unit;
};
----

More structure members may be added in future, but the input pointer will be
written only up to 'buflen' so the ABI is forward-compatible.

Typically a client will iterate through the symbols until grid_symbol_info
returns NULL in order to collect all the symbols.

All symbols exposed by 'grid_symbol_info' are available directly in the C API,
generally as preprocessor macros.  Thus, this function is useful mostly for
language bindings that can't parse the header file and rely on retrieving the
symbols at runtime.

Note that the GRID_MSG symbol is not exported by the 'grid_symbol_info' function.
First, it is a pointer rather than an integer; second, the symbol is not
supposed to be exported from language bindings to the user. Instead, language
bindings should provide the zero-copy functionality in a language-specific way,
if at all (zero-copy functionality may not make sense for some
languages/bindings).

AVAILABLE NAMESPACES
--------------------
*GRID_NS_NAMESPACE*::
Equals to zero and denotes the GRID_NS_* constants themselves
*GRID_NS_VERSION*::
Nanomsg version constants
*GRID_NS_DOMAIN*::
Socket domain (or address family) constants AF_SP, AF_SP_RAW
*GRID_NS_TRANSPORT*::
Transport name constants (used for socket options mainly)
*GRID_NS_PROTOCOL*::
Socket protocol constants
*GRID_NS_OPTION_LEVEL*::
Socket option level constants (GRID_SOL_SOCKET)
*GRID_NS_SOCKET_OPTION*::
Socket options for GRID_SOL_SOCKET level
*GRID_NS_TRANSPORT_OPTION*::
Socket options for transport level (used with transport constants)
*GRID_NS_OPTION_TYPE*::
The option types (described below)
*GRID_NS_FLAG*::
The grid_send/grid_recv flags (only GRID_DONTWAIT for now)
*GRID_NS_ERROR*::
The errno values
*GRID_NS_LIMIT*::
Various gridmq limits (only GRID_SOCKADDR_MAX for now)
*GRID_NS_EVENT*::
Event flags (bit mask) for use with grid_poll (GRID_POLLIN, GRID_POLLOUT)

AVAILABLE OPTION TYPES
----------------------
*GRID_TYPE_NONE*::
No type, is returned for constants that are not socket options
*GRID_TYPE_INT*::
The integer type
*GRID_TYPE_STR*::
String (char *) type

More types may be added in the future to gridmq. You may enumerate all of them
using the 'grid_symbol_info' itself by checking 'GRID_NS_OPTION_TYPE' namespace.

AVAILABLE OPTION UNITS
----------------------
*GRID_UNIT_NONE*::
No unit, is returned for constants that are not socket options, or do not have
any meaningful unit (strings, integer values)
*GRID_UNIT_BYTES*::
The option value is expressed in bytes
*GRID_UNIT_MILLISECONDS*::
The option value is expressed in milliseconds
*GRID_UNIT_PRIORITY*::
The option value is a priority, an integer from 1 to 16
*GRID_UNIT_BOOLEAN*::
The option value is boolean, an integer 0 or 1

More types may be added in the future to gridmq. You may enumerate all of them
using the 'grid_symbol_info' itself by checking 'GRID_NS_OPTION_TYPE' namespace.


RETURN VALUE
------------
If 'i' is valid, returns the number of bytes stored at the structure. The
maximum value that can be returned is 'buflen'.

If 'i' is out-of-range, grid_symbol_info returns zero.


EXAMPLE
-------

----
int i;
for (i = 0; ; ++i) {
    struct grid_symbol_properties sym;
    int rc = grid_symbol_info (i, &sym, sizeof (sym));
    if(rc == 0)
        break;
    assert (rc == sizeof (sym));
    printf ("'%s' = %d\n", sym.name, sym.value);
}
----

SEE ALSO
--------
linkgridmq:grid_symbol[3]
linkgridmq:grid_errno[3]
linkgridmq:grid_strerror[3]
linkgridmq:gridmq[7]


AUTHORS
-------
Paul Colomiets <paul@colomiets.name>
Garrett D'Amore <garrett@damore.org>
