/*
    Copyright (c) 2013 Martin Sustrik  All rights reserved.

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom
    the Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
    IN THE SOFTWARE.
*/

#ifndef GRID_USOCK_INCLUDED
#define GRID_USOCK_INCLUDED

/*  Import the definition of grid_iovec. */
#include "../grid.h"

/*  OS-level sockets. */

/*  Event types generated by grid_usock. */
#define GRID_USOCK_CONNECTED 1
#define GRID_USOCK_ACCEPTED 2
#define GRID_USOCK_SENT 3
#define GRID_USOCK_RECEIVED 4
#define GRID_USOCK_ERROR 5
#define GRID_USOCK_ACCEPT_ERROR 6
#define GRID_USOCK_STOPPED 7
#define GRID_USOCK_SHUTDOWN 8

/*  Maximum number of iovecs that can be passed to grid_usock_send function. */
#define GRID_USOCK_MAX_IOVCNT 3

/*  Size of the buffer used for batch-reads of inbound data. To keep the
    performance optimal make sure that this value is larger than network MTU. */
#define GRID_USOCK_BATCH_SIZE 2048

#include "fsm.h"
#include "worker.h"

#include <sys/types.h>
#include <sys/socket.h>
#include <sys/uio.h>

struct grid_usock {

    /*  State machine base class. */
    struct grid_fsm fsm;
    int state;

    /*  The worker thread the usock is associated with. */
    struct grid_worker *worker;

    /*  The underlying OS socket and handle that represents it in the poller. */
    int s;
    struct grid_worker_fd wfd;

    /*  Members related to receiving data. */
    struct {

        /*  The buffer being filled in at the moment. */
        uint8_t *buf;
        size_t len;

        /*  Buffer for batch-reading inbound data. */
        uint8_t *batch;

        /*  Size of the batch buffer. */
        size_t batch_len;

        /*  Current position in the batch buffer. The data preceding this
            position were already received by the user. The data that follow
            will be received in the future. */
        size_t batch_pos;

        /*  File descriptor received via SCM_RIGHTS, if any. */
        int *pfd;
    } in;

    /*  Members related to sending data. */
    struct {

        /*  msghdr being sent at the moment. */
        struct msghdr hdr;

        /*  List of buffers being sent at the moment. Referenced from 'hdr'. */
        struct iovec iov [GRID_USOCK_MAX_IOVCNT];
    } out;

    /*  Asynchronous tasks for the worker. */
    struct grid_worker_task task_connecting;
    struct grid_worker_task task_connected;
    struct grid_worker_task task_accept;
    struct grid_worker_task task_send;
    struct grid_worker_task task_recv;
    struct grid_worker_task task_stop;

    /*  Events raised by the usock. */
    struct grid_fsm_event event_established;
    struct grid_fsm_event event_sent;
    struct grid_fsm_event event_received;
    struct grid_fsm_event event_error;

    /*  In ACCEPTING state points to the socket being accepted.
        In BEING_ACCEPTED state points to the listener socket. */
    struct grid_usock *asock;

    /*  Errno remembered in GRID_USOCK_ERROR state  */
    int errnum;
};

void grid_usock_init (struct grid_usock *self, int src, struct grid_fsm *owner);
void grid_usock_term (struct grid_usock *self);

int grid_usock_isidle (struct grid_usock *self);
int grid_usock_start (struct grid_usock *self,
    int domain, int type, int protocol);
void grid_usock_start_fd (struct grid_usock *self, int fd);
void grid_usock_stop (struct grid_usock *self);

void grid_usock_swap_owner (struct grid_usock *self, struct grid_fsm_owner *owner);

int grid_usock_setsockopt (struct grid_usock *self, int level, int optname,
    const void *optval, size_t optlen);

int grid_usock_bind (struct grid_usock *self, const struct sockaddr *addr,
    size_t addrlen);
int grid_usock_listen (struct grid_usock *self, int backlog);

/*  Accept a new connection from a listener. When done, GRID_USOCK_ACCEPTED
    event will be delivered to the accepted socket. To cancel the operation,
    stop the socket being accepted. Listening socket should not be stopped
    while accepting a new socket is underway. */
void grid_usock_accept (struct grid_usock *self, struct grid_usock *listener);

/*  When all the tuning is done on the accepted socket, call this function
    to activate standard data transfer phase. */
void grid_usock_activate (struct grid_usock *self);

/*  Start connecting. Prior to this call the socket has to be bound to a local
    address. When connecting is done GRID_USOCK_CONNECTED event will be reaised.
    If connecting fails GRID_USOCK_ERROR event will be raised. */
void grid_usock_connect (struct grid_usock *self, const struct sockaddr *addr,
    size_t addrlen);

void grid_usock_send (struct grid_usock *self, const struct grid_iovec *iov,
    int iovcnt);
void grid_usock_recv (struct grid_usock *self, void *buf, size_t len, int *fd);

int grid_usock_geterrno (struct grid_usock *self);

#endif
